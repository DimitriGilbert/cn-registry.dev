################################################################################
# Library: use-formedible - LLM Knowledge Base
# Version: 1.0 (Source-audited with examples from this project)
# Date: 2025-07-28
################################################################################

### üö® CRITICAL REMINDERS FOR LLM AGENTS
---
1.  **`useFormedible` is the ONLY way to create forms in this project.** Do not use `@tanstack/react-form` directly.
2.  **Auto-Rendering is Key:** The `<Form />` component returned by the hook handles all rendering. You do not need to write `form.Field` or `<button type="submit">` manually.
3.  **Schema is the Source of Truth:** The `zod` schema passed to `useFormedible` is mandatory and drives all validation.
4.  **Field Configuration:** The `fields` array is the primary way to define the form's structure and appearance.

### üöÄ PRIMARY API: `useFormedible<TFormValues>(options)`
---
- **Description**: A powerful, schema-driven form generation hook that wraps TanStack Form and shadcn/ui.
- **Location:** `apps/web/src/hooks/use-formedible.tsx`
- **Returns**: `{ Form, form }`
    - **`Form`**: A React component that automatically renders the entire form UI, including fields, layout, and submission buttons.
    - **`form`**: The raw TanStack Form instance. Use this for advanced cases like resetting the form (`form.reset()`).

### ‚öôÔ∏è CONFIGURATION: `UseFormedibleOptions<TFormValues>`
---
**Core:**
- `schema: z.ZodSchema<TFormValues>` - **Required**. The Zod schema for validation.
- `fields: FieldConfig[]` - **Required**. An array of objects defining the form fields.
- `formOptions: { defaultValues: TFormValues; onSubmit: (props: { value: TFormValues; ... }) => void | Promise<void> }` - **Required**. TanStack Form options, including default values and the submission handler.
- `loading?: boolean` - (Default: `false`) Puts the form in a loading state, disabling the submit button.
- `submitLabel?: string` - (Default: `"Submit"`) The text for the submit button.

### üß© INTERFACE: `FieldConfig`
---
**Core:**
- `name: string` - **Required**. The key in `TFormValues` that this field maps to.
- `type: string` - **Required**. The type of field to render (e.g., `"text"`, `"select"`, `"textarea"`).
- `label?: string` - The field's label.
- `placeholder?: string` - The placeholder text for the input.
- `description?: string` - A short description displayed below the label.

**Field-Specific Configurations:**
- `options?: Array<{value: string; label: string}> | string[]` - For `select` and `radio` fields.
- `textareaConfig?: { rows?: number; maxLength?: number; showWordCount?: boolean; }` - For `textarea` fields.
- `arrayConfig?: { itemType: string; ... }` - For `array` fields.
- `multiSelectConfig?: { searchable?: boolean; ... }` - For `multiSelect` fields.

### üìã SUPPORTED FIELD TYPES
---
`text`, `textarea`, `number`, `select`, `multiselect`, `checkbox`, `switch`, `radio`, `slider`, `date`, `rating`, `phone`, `color`, `file`, `array`, `autocomplete`, `duration`, `location`, `masked`, `object`.

---
### üìö USAGE PATTERNS & EXAMPLES
---

#### Pattern 1: Basic Form for Creating/Editing an Item
This is the most common pattern in the codebase, used in the admin panel for managing components, tools, categories, etc.

- **Reference File:** `apps/web/src/components/forms/item-form.tsx`

```tsx
import { useFormedible } from "@/hooks/use-formedible";
import { z } from "zod";

// 1. Define the Zod schema for validation
export const itemFormSchema = z.object({
  name: z.string().min(1, "Name is required"),
  description: z.string().min(1, "Description is required"),
  repoUrl: z.string().url().optional().or(z.literal("")),
  // ... other fields
});

export type ItemFormData = z.infer<typeof itemFormSchema>;

// 2. Create the reusable form component
export function ItemForm({ onSubmit, loading, ... }) {
  // 3. Define the fields, mapping names to the schema
  const fields = useMemo(() => [
    { name: "name", type: "text", label: "Name" },
    { name: "description", type: "textarea", label: "Description" },
    { name: "repoUrl", type: "url", label: "Repository URL" },
    // ... other fields
  ], []);

  // 4. Call the hook with the schema, fields, and form options
  const { Form } = useFormedible<ItemFormData>({
    schema: itemFormSchema,
    fields,
    formOptions: {
      defaultValues: { ... },
      onSubmit: async ({ value }) => {
        onSubmit(value);
      },
    },
    loading,
    submitLabel: "Save",
  });

  // 5. Render the auto-generated form
  return <Form />;
}
```

#### Pattern 2: Using the Form in a Page

- **Reference File:** `apps/web/src/app/admin/components/new/page.tsx`

```tsx
"use client";

import { useMutation, useQuery } from "@tanstack/react-query";
import { ItemForm, type ItemFormData } from "@/components/forms/item-form";
import { trpc } from "@/utils/trpc";

export default function NewComponentPage() {
  const { data: categories = [] } = useQuery(
    trpc.categories.getAll.queryOptions(),
  );

  const createMutation = useMutation(
    trpc.components.create.mutationOptions({ ... })
  );

  const handleSubmit = (data: ItemFormData) => {
    createMutation.mutate(data);
  };

  return (
    <ItemForm
      categories={categories}
      onSubmit={handleSubmit}
      loading={createMutation.isPending}
      submitLabel="Create Component"
    />
  );
}
```
